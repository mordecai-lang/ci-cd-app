name: CI/CD line testing

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: self-hosted
    outputs:
      IMAGE: ${{ steps.vars.outputs.image }}
      TAG_SHA: ${{ steps.vars.outputs.tag_sha }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log In To DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Image tag
        id: vars
        run: |
          echo "IMAGE=${{ secrets.DOCKER_USERNAME }}/myapp" >> $GITHUB_ENV
          echo "TAG_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "image=$IMAGE" >> GITHUB_OUTPUT
          echo "tag_sha=$TAG_SHA" >> GITHUB_OUTPUT

      - name: Build Image
        run: |
          docker build -t $IMAGE:latest -t $IMAGE:$TAG_SHA .

      - name: Run container
        run: |
          docker run -d --name testapp -p 5004:5000 $IMAGE:latest
          sleep 5

      - name: Healthcheck
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
          echo "Healthcheck status is $STATUS"
          if [ $STATUS -ne 200 ]; then
            echo "App healthcheck failed!"
            docker logs testapp
            exit 1
          fi

      - name: Inspect docker health
        run: docker inspect --format='{{json .State.Health}}' testapp

      - name: Clean up
        run: |
          docker rm -f testapp

      - name: Push Image
        run: |
          docker push $IMAGE:latest
          docker push $IMAGE:$TAG_SHA
  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Login to DockerHub (deploy)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the exact image built earlier
        run: |
          docker pull ${{ needs.build-and-push.outputs.IMAGE }}:${{ needs.build-and-push.outputs.TAG_SHA }}

      - name: Deploy container (run the pulled image)
        run: |
          docker stop flask-app || true
          docker rm flask-app || true
          docker run -d -p 5003:5000 --name flask-app ${{ needs.build-and-push.outputs.IMAGE }}:${{ needs.build-and-push.outputs.TAG_SHA }}

      - name: Health check 200 OK (remote)
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.HOST_SERVER }}:5000)
          echo "Healthcheck status is $STATUS"
          if [ $STATUS -ne 200 ]; then
            echo "Remote up is down"
            exit 1
            docker logs flaskapp
          fi

      - name: Healthcheck JSON
        run: |
          curl -s http://${{ secrets.HOST_SERVER }}:5000/health | grep '"status":"healthy"'
