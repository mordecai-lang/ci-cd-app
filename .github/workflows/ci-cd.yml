name: pipeline
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: self-hosted
    outputs:
      image: ${{ steps.metadata.outputs.image }}
      tag_sha: ${{ steps.metadata.outputs.tag_sha }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log In To DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set metadata
        id: metadata
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/myapp
          TAG_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)

          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "tag_sha=$TAG_SHA" >> $GITHUB_OUTPUT

      - name: Debug
        run: |
          echo "IMAGE=${{ steps.metadata.outputs.image }}"
          echo "TAG=${{ steps.metadata.outputs.tag }}"

      - name: Uotputs
        run: cat $GITHUB_OUTPUT


      - name: Build Docker Image
        run: |
          docker build -t ${{ steps.metadata.outputs.image }}:latest -t ${{ steps.metadata.outputs.image }}:${{ steps.metadata.outputs.tag_sha }} .

      - name: Run container (test locally)
        run: |
          docker run -d --name testapp -p 5004:5000 ${{ steps.metadata.outputs.image }}:latest
          sleep 5


      - name: Clean up test container
        run: docker rm -f testapp || true

      - name: Push Image to DockerHub
        run: |
          docker push ${{ steps.metadata.outputs.image }}:latest
          docker push ${{ steps.metadata.outputs.image }}:${{ steps.metadata.outputs.tag_sha }}
      - name: Outputs


      - name: Outputs
        run: cat $GITHUB_OUTPUT

  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Uotputs
        run: cat $GITHUB_OUTPUT

      - name: Deploy container
        run: |
          IMAGE=${{ needs.build-and-push.outputs.image }}
          TAG=${{ needs.build-and-push.outputs.tag_sha }}
          docker pull $IMAGE:$TAG
          docker stop flask-app || true
          docker rm flask-app || true

          docker run -d -p 5003:5000 --name flask-app $IMAGE:$TAG

          echo "Successfully deployed"
