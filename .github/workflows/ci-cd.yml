name: CI/CD Pipe

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: self-hosted
    # expose job outputs to other jobs
    outputs:
      image: ${{ steps.vars.outputs.image }}
      tag_sha: ${{ steps.vars.outputs.tag_sha }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log In To DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Image tag
        id: vars
        run: |
          IMAGE="${{ secrets.DOCKER_USERNAME }}/myapp"
          TAG_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7 | tr -d '[:space:]')

          echo "image=$IMAGE" >> $GITHUB_ENV
          echo "tag_sha=$TAG_SHA" >> $GITHUB_ENV

          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "tag_sha=$TAG_SHA" >> $GITHUB_OUTPUT
      - name: Debug Outputs
        run: |
          echo "IMAGE from env = $IMAGE"
          echo "TAG_SHA = $TAG_SHA"
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE:latest -t $IMAGE:$TAG_SHA .

      - name: Run container (test locally)
        run: |
          docker run -d --name testapp -p 5004:5000 $IMAGE:latest
          sleep 5

      - name: Healthcheck (local)
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
          echo "Healthcheck status is $STATUS"
          if [ $STATUS -ne 200 ]; then
            echo "App healthcheck failed!"
            docker logs testapp
            exit 1
          fi

      - name: Clean up test container
        run: docker rm -f testapp || true

      - name: Push Image to DockerHub
        run: |
          docker push $IMAGE:latest
          docker push $IMAGE:$TAG_SHA


  deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Deploy container (local runner, skip pull)
        run: |
          IMAGE=${{ needs.build-and-push.outputs.image }}
          TAG=${{ needs.build-and-push.outputs.tag_sha }}

        # stop old container if exists
          docker stop flask-app || true
          docker rm flask-app || true

        # run new container using the built image (no pull)
          docker run -d -p 5003:5000 --name flask-app $IMAGE:$TAG

      - name: Health check 200 OK
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5003)
          echo "Healthcheck status is $STATUS"
          if [ "$STATUS" -ne 200 ]; then
            echo "App is down!"
            docker logs flask-app || true
            exit 1
          fi

      - name: Healthcheck JSON
        run: |
          curl -s http://localhost:5003/health | grep '"status":"healthy"'







